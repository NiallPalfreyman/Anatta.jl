#========================================================================================#
#	Laboratory 201
#
# Archetypal narratives and causal loops.
#
# Author: Niall Palfreyman, 06/12/2023
#========================================================================================#
[
    Activity(
        """
        Hi! Welcome to Anatta Lab 201: What kinds of systemic behaviours cause problems?

        In this Subject, we will use system dynamics to model many different kinds of system in
        nature, and we will discover that the same patterns of behaviour occur over and over again
        in systems that at first appear completely different from each other. We will also see
        that these similar behaviours are produced by interestingly similar mechanisms. In this
        laboratory, we look at six archetypal narratives that occur in many different systems:

        Growth, Decay, Goal-seeking, Overshoot, Oscillation and Switching.
        """,
        "",
        x -> true
    ),
    Activity(
        """
        Let's start with a very simple narrative that we already know quite well: Growth.

        How does growth occur? Well, from a systems perspective, we are not very interested in
        external influences like the migration of rabbits into a field, but rather in the internal
        mechanisms of how rabbits increase their numbers.
        
        This system-oriented perspective makes perfect sense if we want to nurture and heal
        systems. In order to heal you, your doctor is not interested in who gave you your current
        infection, but in how that infection is interacting with your body to make you ill.
        Similarly, if I am feeling depressed, it does not help if I expect others to make me happy:
        I need to discover how behave in ways that to do it for myself.

        So when we talk about Growth in systems, we mean INTRINSIC growth that is generated by each
        individual part of the system. What is the individual behaviour that contributes to the
        growth of a rabbit colony?
        """,
        "",
        x -> any(occursin.(["birth","repro","sex"],lowercase(x)))
    ),
    Activity(
        """
        Requiring that growth comes from within a system u means that the growth of u is a function
        of u itself, so that the current state of u determines how fast it will grow in the future:
            du/dt = f(u)

        A very simple example of intrinsic growth is exponential growth, in which the growth of the
        entire system is equal to the sum of the Specific growth of each individual part:
            du/dt = r u

        Include the file Archetypes.jl in the SD subfolder, then execute the following command:
            Archetypes.demo(1)

        to see a demonstration of the first archetypal narrative, Growth. In this demonstration
        program, what are the intrinsic parts of the system that implement the growing process?
        """,
        "",
        x -> any(occursin.(["protein","molecule","concentration"],lowercase(x)))
    ),
    Activity(
        """
        What is the value of the specific growth rate β in our demonstration program?
        """,
        "",
        x -> x==0.4
    ),
    Activity(
        """
        Make a note of the value of the protein concentration P after 15 minutes (that is, after
        15 unspecified time units of the graph):
        """,
        "",
        x -> abs(x-40) < 2.0
    ),
    Activity(
        """
        Nature has many examples of intrinsic growth: monoclonal replication of immune cells,
        bacterial division, sexual reproduction of organisms, nuclear chain reactions. The example
        I have chosen here is auto-regulation of gene expression. The idea is that a protein with
        concentration P activates its own expression by docking to the promoter DNA of its own
        gene. Therefore, the greater the value of P, the more protein is available to dock onto the
        promoter and so promote faster expression.
        
        In our implementation, we assume that doubling the value of P also doublse its expression
        rate. This seems a reasonable idea when P is small, since then the P-molecules will only
        infrequently dock to the promoter, but what if P is large? In this case, molecules will
        dock rapidly, and may have to wait for each other to undock again. This means there must be
        a critical concentration K of P, at which the expression rate dP/dt becomes saturated and
        is no longer proportional to P. We often model this saturation using the Hill function:
            dP/dt = β * hill(P,K,1) ≡ β P/(K+P)
        
        To which value does this expression rate converge as P approaches infinity?
        """,
        "In your head, set P equal to some extremely large number like 1 gazillion",
        x -> x=='β' || x=="β" || x==0.4
    ),
    Activity(
        """
        Again, assuming that expression rate is given by the Growth DE
            dP/dt = β * hill(P,K,1) ≡ β P/(K+P),

        what is the value of this expression rate when P=K?
        """,
        "",
        x -> x==1/2
    ),
    Activity(
        """
        As you see, when P is much smaller than the saturation constant K, its expression rate is
        approximately proportional to P. However, when P=K, the expression rate is β/2, and for
        P > K, P's expression rate is no longer proportional to P, but instead becomes almost:
        """,
        "β = 0.4 is a constant number",
        x -> occursin("const",lowercase(x))
    ),
    Activity(
        """
        Our above argument means that protein concentrations in the cell grow exponentially so long
        as they are only small, but as the concentration increases, it is expressed linearly with a
        constant expression rate β.
        
        Experiment with this idea: In the appropriate line in Archetypes, change the dynamical rule
        from   "dP[1] = β[1] * P[1]"   to   "dP[1] = β[1] * hill(P[1],1,1)".
        
        If you study the new plot, you will see that by the time P reaches the value 1 (=K), the
        previously exponential curve has straightened considerably. By the time P=2 (from around
        t = 10), the curve seems almost straight. Check that its gradient is approximately β = 0.4.
        """,
        "",
        x -> true
    ),
    Activity(
        """
        Now let's move on to study the Decay archetype. Again, decay is an intrinsic process that
        comes from within a system, and again we will take a protein concentration P as our
        example. In the cell, ALL gene products are broken down by chemical processes, and of
        course the more molecules are present, the more can be broken down per second. That is:
                dP/dt = -g(P)

        In practical biological systems, the function g(P) has the property that g(P) ≥ 0, and
        g(P) approaches 0 as P approaches 0. To see why this is the case, consider what would
        happen if g(P) remained large as P approached 0. What might then happen to P as it got
        very close to zero?
        """,
        "What do you get if you subtract a large positive number from a small positive number?",
        x -> occursin("negativ",lowercase(x))
    ),
    Activity(
        """
        Run Archetypes.demo(2) to view the typical exponential decay curve. Notice that the DE
            dP/dt = -α P

        in line 52 of Archetypes.jl does indeed satisfy the condition that g(P)≡αP approaches 0 as
        P approaches 0. Also, since α=0.4, and 0.4 * 2.5 = 1.0, we would expect the concentration P
        to be divided by e=2.718 every 2.5 minutes. Check that this is true of our simulation.
        """,
        "Remember that you can measure the 2.5 minutes starting from ANY point on the curve!",
        x -> true
    ),
    Activity(
        """
        The next archetypal narrative is Goal-seeking. Goal-seeking is any behaviour that always
        tries to approach a particular limiting value over time (i.e., as t approaches infinity).
        Run the demonstration method Archetypes.demo(3) now to see a typical goal-seeking
        narrative, then come back and tell me to which value P converges as t approaches infinity.
        """,
        "",
        x -> abs(x-3.0) < 0.1
    ),
    Activity(
        """
        Now, the interesting question here is: Why does P tend toward the particular concentration
        3.0? Again, we are taking protein expression as our example of a goal-seeking narrative. In
        the Growth narrative, we saw that in the long-term, the expression of P is a constant value
        β. However, we also know from the Decay narrative that P is broken down exponentially at A
        rate αP. Remember that each term of a DE is a single cause of change in the system, so the
        DE for a general gene product is:
            dP/dt = β - α P

        This is indeed the DE given in the script for this lab. A Fixed Point P* of this DE is any
        value of P for which dP/dt disappears. That is, when P=P*, its value will not change any
        more over time: P* is an Equilibrium value of P.

        Calculate the fixed point P* by equating the right-hand side of this DE to zero and subs-
        tituting the values for α and β in Archetypes.demo(3). What is the fixed point value P*?
        """,
        "",
        x -> x==3.0
    ),
    Activity(
        """
        So here we have the answer to our question: A cell can regulate its concentration of any
        gene product P by combining constant expression β with chemical breakdown αP to form a
        so-called Proportional (P-) Controller, for which the equilibrium concentration is β/α.

        In actual fact, P-controllers are notoriously unstable, so protein concentrations regulated
        in this way can vary by up to 80%. For this reason, many sensitive cellular systems use a
        more robust regulation (i.e. goal-seeking) mechanism called PI-control (proportional-
        integral control). We will look more closely at PI-controllers later in this Subject.
        """,
        "",
        x -> true
    ),
    Activity(
        """
        Now let's move on to the Overshoot archetype. Run Archetypes.demo(4) to see what Overshoot
        looks like, then refer to the script and code to tell me the initial biomass of Algae in
        the simulation:
        """,
        "The value is in the graph in the script, but the code tells you which curve represents Algae",
        x -> x==100.0
    ),
    Activity(
        """
        Overshoot means that the system grows, but then undermines its own growth by overshooting
        its sustainability limits. You can see this story in the BOTG for the dugong-algae system.

        The Overshoot archetype is more complex than anything we have seen up to now, so we will
        need to gather some information to understand it. First, what is the order of our Overshoot
        system? That is, how many stocks does it contain?
        """,
        "Each stock in the system is a bubble representing one state variable",
        x -> x==2
    ),
    Activity(
        """
        We have two stocks in our system: Dugongs and Algae. The initial number of dugongs is 40,
        and the initial biomass of the algae is 100. Looking at the first DE for the dugongs, we
        see that the first term is a logistic term with a fixed point when D=A. That is, this term
        can sustain exactly as many dugongs as the current quantity of algae in the system.

        Notice, however, that there is a second, negative, term in the dugong equation, that equals
        the number of dugongs multiplied by a Hill function. The Hill function is always positive,
        so this means that the growth rate of the dugongs is reduced by the presence of this Hill
        function.

        NOTE: We met Hill functions in Subject 1 Computation. You should remember that Hill
        functions model saturated growth and decay - if the second argument (half-response) is
        positive, the function INcreases from 0 to 1, whereas if the half-rresponse is negative,
        the function DEcreases from 1 to 0. Refer back to lab 10 if you are unsure about this.

        Which variable determines the value of this Hill function?
        """,
        "Look at the arguments of the call to the Hill function",
        x -> occursin("algae",lowercase(x)) || occursin("u[2]",x)
    ),
    Activity(
        """
        We should expect this reduction in dugong growth rate if the number of algae falls, since
        of course the dugong eat the algae. But look carefully at the form of this Hill function:
            hill(u[2],-60,9)

        Does this Hill function rise or fall with the number of algae?
        """,
        "Look at the sign of the second argument",
        x -> occursin("rise",lowercase(x))
    ),
    Activity(
        """
            hill(u[2],-60,9)

        At which value of Algae does this value drop to 0.5?
        """,
        "Look at the magnitude of the second argument",
        x -> x == 60
    ),
    Activity(
        """
           hill(u[2],-60,9)

        Would you describe this value of cooperativity as high or low?
        """,
        "Look at the third argument",
        x -> occursin("high",lowercase(x))
    ),
    Activity(
        """
        Yes, this value of cooperativity is indeed very high, and implies that the Hill curve is
        almost a step function, staying close to 1 for algae values lower than 60, and falling
        rapidly to zero for algae values above 60.
            
        So, when there are large numbers of algae in the system, the dugong thrive and stay close
        to the sustainable capacity given by the current number of algae, however if the algae fall
        below 60, the dugong find it so difficult to find the algae that their survival rate
        rapidly falls towards zero due to the increased death rate represented by the Hill function.

        Now look at the second differential equation for the algae growth. The entire rght-hand
        side has a mathematical form that you should recognise easily by now. What is this form?
        """,
        "Imagine setting the Hill function equal to 1",
        x -> occursin("logistic",lowercase(x))
    ),
    Activity(
        """
        The DE for the algae is also a logistic equation, as you can see if you imagine setting
        the Hill function hill(u[1],-55,9) in the second DE equal to 1. Also, the sustainable
        capacity p[2] of the algae is indeed 100, which is also their initial value, so
        theoretically, the system should be able to sustain 100 algae and 100 dugongs. Check that
        this is correct by switching off the two Hill functions by placing a 0 in front of the
        Dugong Hill function and raising the Algae half-response value (K) to 1e6. What is stable
        limit value of Dugong and Algae?
        """,
        "",
        x -> x == 100
    ),
    Activity(
        """
        OK, so in a perfect world, our dugong-algae system is perfectly sustainable. Now we'll
        slowly switch the Hill functions back on again. We have just seen that the first Hill
        function (in line 68 of Archetypes.jl) reduces the number of dugong drastically if the
        number of algae falls below a threshold level that makes the dugong colony unsustainable.
        Now remove the 0 in front of the Hill function in the first DE. How many dugongs can the
        system sustain now?
        """,
        "Remember, we are only switching the FIRST Hill function back on!",
        x -> abs(x-100)<5.0
    ),
    Activity(
        """
        This is a surprise! :-o Switching on the reduction in dugong growth rate has no effect on
        their final value of 100! To understand what is happening, it is useful to compare the
        causal-loop diagram (CLD) with the structure-process-diagram (SPD) of the Overshoot
        archetype in the script. Make sure you can see these diagrams now ...
        """,
        "Keep the script open at the diagrams for Overshoot, while we continue chatting",
        x -> true
    ),
    Activity(
        """
        CLDs are useful as a presentation tool for explaining SPDs to lay people - they demonstrate
        well how stocks and processes influence each other in a model. This CLD contains four
        feedback loops: two reinforcing loops (+) and two balancing loops (-).
        
        The simplest causal loops in Overshoot are the algae and dugong reinforcing loops. In both
        cases, the algae or dugong give birth to new individuals: the more algae there are, the
        more regrowth occurs, and the more regrowth happens, the more algae there are. These two
        reproductive loops maintain the dynamics of the system.

        The next interesting loop is the balancing (-) loop in which dugongs graze on the algae,
        thereby reducing the number of algae, and also reducing the number of dugong deaths. We can
        tell that this is a balancing loop because it contains an ODD number of negative causal
        influences. How many negative causes are contained in this loop?
        """,
        "Count the number of negative signs on the arrowheads in the loop",
        x -> x==3
    ),
    Activity(
        """
        In our previous experiment, it was this grazing loop that we switched back on. The dugong
        graze on the mature algae, reducing their biomass, but this merely lowers their growth rate
        while still leaving them able to regrow. As a result, the dugong-algae system takes longer
        to build up from the initial value of 40 dugong, but it is still capable of sustaining 100
        dugong.

        However, this situation becomes very different in situations where the dugong population
        grows so large that they are forced to not only to eat mature algae, but also to dig out
        the algae roots for extra nourishment, and so damage the algae's ability to replenish
        themselves.

        This is the final balancing loop in our model, in which the dugong undermine the
        sustainable capacity of the algae. Turn on this loop now by inserting the value K=55 into
        the second Hill function, and re-running the simulation. What is the resulting sustainable
        level of algae?
        """,
        "Your answer is only a visual approximation to the limit value",
        x -> abs(x-74) < 4
    ),
    Activity(
        """
        This is the essence of the Overshoot archetype: By growing too large, the dugong population
        undermines the sustainability of the algae population on which it depends. Does this story
        sound familiar in relation to human populations?

        To see how this undermining is implemented mathematically, notice how the Hill function in
        the second equation appears multiplicatively:
            du[2] = p[2]*u[2] * (1 - u[2]/(p[3] * hill(u[1],-55,9)))

        By carefully studying the positioning of the brackets in this DE, you should see the
        influence that the Hill function has on the carrying capacity of the algae. Do dugong
        populations greater than 55 mean that the logistically sustainable number of algae gets
        bigger or smaller?
        """,
        "Think about what happens to the value of the Hill function",
        x -> occursin("small",lowercase(x))
    ),
    Activity(
        """
        Before continuing to the next archetype, look carefully at the phase plot displayed by
        Archetypes.demo(4). Instead of plotting phase variables against time, phase diagrams
        plot state variables against each other. In our case here, I have plotted Algae against
        Dugongs. As a result, the phase plot gives us no information about time. It does, however,
        give us a good sketch of how the different state variables influence each other.

        Notice that the phase curve runs down and rightwards from the initial state at the top of
        the graph with 40 dugong and 100 units of algae. This indicates that the increase in number
        of dugongs is associated with a drop in the amount of algae, suggesting that the two are
        causally linked in some way. Of course, in this particular case, we already that rising
        numbers of dugong are associated with higher feeding, but what about situations where other
        food sources or other grazers exist? In such cases, the phase plot picks out the dugong as
        probable consumers of the algae.

        Continuing along the phase curve, the algae fall continuously, while the number of dugong
        rises to a maximum, and only then starts falling more rapidly than the algae. Does this
        suggest rather that dugong or that algae drive this steep decline?
        """,
        "Which species starts falling first?",
        x -> occursin("algae",lowercase(x))
    ),
    Activity(
        """
        We have now learned how four different common narrative operate in the real world: Growth,
        Decay, Goal-seeking and Overshoot. Let's move on now to the next archetype: Oscillation.

        Run the method Archetypes.demo(5) to see the Oscillation narrative in action. Notice that
        this oscillation is a little different from the sinusoidal simple harmonic motion (SHM)
        with which you may be more familiar. Unlike SHM, this is a Relaxation Oscillator that
        drives itself from incoming energy, so that its amplitude grows to a steady value over
        time. What is the period of this oscillator?
        """,
        "Since phase plots contain no time information, you need to estimate this value from " *
            "the BOTG",
        x -> abs(x-11.0)<2
    ),
    Activity(
        """
        OK, let's look at how a relaxation oscillator works. Our example is Sel’kov’s model of
        glycolysis oscillations in yeast. We will need to know some chemistry to analyse it.
        
        Fructose-6-phosphate (F) is supplied to the system at a constant, moderate rate p[2], where
        it accumulates slowly. This is the process "supply" shown in the SPD in the script. Now
        look down at the DEs for this system. Notice that both equations contain terms p[1]*F and
        A^2*F, but with opposite signs in each equation. It looks as if something is being taken
        away from F and being given to A.
        
        What kind of natural process takes quantity away from F6P and gives it to ADP?
        """,
        "It almost looks as if F6P is being turned into ADP! ;-)",
        x -> occursin("chemical",lowercase(x)) || occursin("reaction",lowercase(x))
    ),
    Activity(
        """
        That's right: F6P is reacting to ADP along two different chemical routes: dissociation and
        reaction. First, F6P converts spontaneously into ADP. As we might expect, this is an
        exponential process, since its rate is proportional to the amount of F6P is present. What
        is the value of the rate constant of this chemical conversion?
        """,
        "Look up the numerical value in the julia code of the oscillator model",
        x -> x==0.06
    ),
    Activity(
        """
        This constant is very small, so the conversion of F6P to ADP is only a slow trickle -
        certainly less than the supply rate of 0.6 - so F must be accumulating. Let's look at the
        second chemical reaction, represented by the terms in A^2*F. What kind of reaction is this?

        To understand this reaction, we need to think about Mass-Action. Remember that A and F are
        the chemical concentrations of ADP and F6P, and so each is proportional to the probability
        that a molecule of ADP or F6P is present within any tiny volume in the cell. In this case,
        which mathematical expression is proportional to the probability that BOTH molecules (i.e.,
        one of ADP AND one of F6P) are present within this tiny volume?
        """,
        "How do we calculate the probability of two independent statistical events occurring?",
        x -> (y=replace(x," "=>""); occursin("A*F",y) || occursin("F*A",y))
    ),
    Activity(
        """
        So A*F is proportional to the probability that a reaction between A and F occurs, but what
        if the reaction requires TWO molecules of ADP to be present? In that case, the probability
        is proportional to A^2*F - which is precisely the DE term that we are analysing!

        So the positive and negative terms in A^2*F represent a reaction looking like this:
            2ADP + F6P -> ADP

        However, we still need to balance this reaction - it is in fact a catalytic reaction:
            2ADP + F6P -> 3ADP

        In other words, in this reaction, one molecule of F6P is converted by two molecules of ADP
        into a new molecule of ADP. What is the rate constant of this reaction?
        """,
        "The rate constant multiplied by the probability term A^2*F gives us the reaction speed",
        x -> x==1.0
    ),
    Activity(
        """
        That's right - I have simplified the dimensions in this equation so as to reduce this rate
        constant to 1. We call this simplification process Non-Dimensionalising the equation.

        Now we can start to see how our relaxation oscillator works. The rate of the catalysis of
        F6P to ADP is much faster than the spontaneous conversion; however, because it requires TWO
        molecules of ADP, it takes a long time to start: it is LAGGED. Remember that if A is small,
        then A^2 is VERY small, so there is a lag-time before the catalysis starts. So what happens
        in the oscillator is this:

        F6P build up, while some trickles into ADP at a very slow rate. Eventually, the amount of
        ADP reaches a tipping point where it catalyses the F6P rapidly into ADP. When there is too
        little F6P to continue, the catalytic reaction stops, the ADP is exponentially broken down,
        and F6P starts to accumulate again. Clever, huh? :)

        Question: Which feature of the phase plot indicates that this reaction is oscillatory?
        """,
        "What can you say about the oscillation curve in the phase plot?",
        x -> occursin("closed",lowercase(x))
    ),
    Activity(
        """
        Finally, we now look at the Switch archetype. This switch involves an interaction between
        a protein P and the RNA (R) from which it is translated. Again, the switch contains a
        lagged reaction indicated by the squared dependency in the third argument of the Hill
        function. Look at the julia implementation of hill() to tell me the meaning of this third
        argument:
        """,
        "You will need to look at the docstring of the hill() method",
        x -> occursin("cooperat",lowercase(x))
    ),
    Activity(
        """
        The third argument n of the hill() describes the "cooperation" involved in the regulation
        described by the Hill function. If the activation or inhibition requires more than one
        molecule to interact, then squared or higher order combinations of probabilities are
        involved. This is the case in our Switch example.

        While the translation rate of P is directly proportional to the amount of RNA present in
        the cell, the transcription rate of RNA requires the cooperation of TWO molecules of P in
        docking onto its promoter. This raises the cooperativity level to 2 in the DEs, and this
        results in lagged, or delayed, transcription of RNA. This lag is essential to the operation
        of this genetic switch.

        Run Archetypes.demo(6) now to see the switch in action.
        """,
        "",
        x -> true
    ),
    Activity(
        """
        Again, the displayed diagram shows you both a BOTG and a phase plot. Concentrate first on
        the phase plot. The simulation starts with both P and R having the initial value 0.1.

        Following the phase trajectory down, we see both of the conentrations P and R falling
        towards zero - the cell does not contain enough of either for P to be continuously
        expressed. If P were the pax6 protein, it would mean that this cell cannot differentiate
        into a light-sensitive optical cell.

        However, at time 10, there is an brief injection of P into the cell (see the time
        information in the BOTG). Perhaps there is a slight seepage of pax6 from a neighbouring
        cell. This injection drives the P concentration up to around 0.8, and suddenly the
        transcription of RNA is switched on. Both P and R now drive each other up to long-term
        expression of pax6, and the cell switches into differentiation.
        """,
        "",
        x -> true
    ),
    Activity(
        """
        Experiment with the Switch archetype to discover how small the injection can be, while
        still switching the cell on. Also: Can you switch the cell on by injecting RNA instead?
        """,
        "",
        x -> occursin('y',lowercase(x))
    ),
    Activity(
        """
        And now your final challenge for this laboratory: In the SPDs for the Oscillation and
        Switch archetypes, I have indicated with brackets (  ) that the loops in the diagrams are
        either balancing or reinforcing. It is your task to write in the diagram whether each loop
        is balancing (-) or reinforcing (+).
        
        You can check your answer by replying() me here the name of ONE archetype and its
        associated sign (+ or -). Can you also explain to a friend WHY each sign applies?
        """,
        "For example, you might enter: reply(\"Oscillation +\")",
        x -> (y=lowercase(x);(occursin("osc",y)&&occursin('-',y) ||
                occursin("swi",y)&&occursin('+',y)))
    ),
]