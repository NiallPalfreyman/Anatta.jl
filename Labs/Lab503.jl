#========================================================================================#
#	Laboratory 503
#
# Emergent patterns.
#
# Author: Niall Palfreyman (February 2023), Emilio Borrelli (July 2022)
#========================================================================================#
[
	Activity(
		"""
		Welcome to Lab 503: Emergent patterns.

		To summarise our discoveries so far in this course: We have reason to believe that
		biological systems are both collective and non-computable. That is, their behaviour arises
		from the interactions between many individuals, and generates figures that we cannot
		compute, but which we might be able to approximate computationally. We will measure the
		success of our computational experiments by PATTERN-FITTING; that is, we will generate
		patterns experimentally and measure how well they 'fit' with the corresponding biological
		figures. In doing this, we will investigate the meaning of the term "emergence":
		
		COMPLEXITY is the ability of a system to generate behaviour which is non-computable,
		collective and reliable. The system achieves this reliability by selectively constraining
		the behaviours of its own individual component agents.
		
		OK, that definition was not easy to understand, so we will start exploring complexity by
		studying Craig Reynold's (1986) famous Boids model. The Boids model was first used in
		cinema to model the movement of a stampeding herd of dinosaurs in the film "Jurassic Park".
		It is defined in the file Boids.jl.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		The Boids model attempts to mimic the flocking behaviour of birds. The resulting motion also
		resembles shoals of fish, herds of buffalo and swarms of bees. The flocks that appear when
		simulating this model are not created or led in any way by special leader birds. Rather, all
		birds follow exactly the same set of rules, from which the flocking motion emerges.
		
		The Boids model generates behaviour that is emergent. That is, the model's behaviour cannot
		be generated by a single boid agent, but only by a collection of many boids; also, we cannot
		computationally predict this behaviour purely based on the behaviour of the individual boids.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		So how does the Boids model work? Individual boids follow three simple rules: Alignment,
		Separation and Cohesion:
			* Alignment: A boid adjusts its velocity to align with neighbouring boids.
			* Separation: A boid adjusts its velocity to avoid colliding with neighbouring boids.
			* Cohesion: A boid adjusts its velocity to move toward neighbouring boid clusters.
		
		When two boids are too close, the Separation rule overrides the other two rules, which are
		deactivated until the minimum separation is attained.
		
		Let's start testing the model. First, decide how many boids you want in your simulation and
		set the "n_boids" slider to that value. Press <reset model> to create these boids, then
		press <step model> to move them stepwise. Find a small cluster of boids and observe how
		they turn apart from each other.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Now change min_separation to its MAXimum value and press <reset model>, then step through
		the model again. Can you see any small clusters of boids forming now?
		""",
		"",
		x -> occursin("no",lowercase(x))
	),
	Activity(
		"""
		Now set min_separation to its MINimum value and press <reset model>, then press <run model>.
		You can stop the simulation at any time by pressing <run model> again. Notice how this
		ridiculous value of min_separation leads to the formation of 'whirlpools' of boids. Find
		out the minimum value of min_separation that avoids the formation of whirlpools:
		""",
		"",
		x -> x==4
	),
	Activity(
		"""
		The default settings for the sliders will produce reasonable flocking behavior, but you
		should play around with the sliders to discover their effect on the flocking motion. I
		suggest that you choose at least one kind of social animal (fish, bird, livestock) and
		try to find a set of slider settings that reproduce the group behaviour of that animal.
		Continue doing this until you achieve a lifelike simulation of some flocking behaviour ...
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Now look at your chosen flocking behaviour, and notice in particular how the flocks form
		without any leader. There is no 'chief' boid that tells others what to do: the flocks
		EMERGE from a collective decision-making process of ALL boids.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Note also that there is no randomness in the behaviour of these agents - the Boids model
		uses random numbers only to determine the initial position of the boids. The fluid, lifelike
		behavior of the boids is produced entirely by deterministic rules. Yet if we performed two
		different runs of the model using two veeery slightly different starting positions, we would
		discover that the behaviour of the two models would diverge exponentially rapidly. The boids'
		motion is therefore chaotic, and so non-computable. If you wish, you can test this by
		changing the code to eliminate all randomness, positioning the boids instead at fixed
		initial locations.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Notice that each flock is dynamic. A flock, once together, is not guaranteed to keep all of
		its members. Why do you think this is? The crucial point here is that the flock is not
		bound together by static structural relations, but by an ongoing interacive dynamic between
		its component boids.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Try this out: Which of Reynolds' three rules leads to boids forming tighter or looser flocks?
		""",
		"",
		x -> occursin("cohe",lowercase(x))
	),
	Activity(
		"""
		Which of Reynolds' three rules leads to flocks having a clear direction of motion?
		""",
		"",
		x -> occursin("align",lowercase(x))
	),
	Activity(
		"""
		Try the following experiments: You can turn off a rule entirely by setting that rule's
		weight to zero. Is one rule by itself enough to produce at least some flocking? What about
		two rules? Note what is missing from the resulting behavior when you leave out each rule.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Will running the model for a long time produce a static flock? Or will the birds never
		settle down to an unchanging formation? Remember, there are no random numbers used in this
		model.
		""",
		"",
		x -> true
	),
	Activity(
		"""
		Now try extending my model to achieve at least one of the following goals:
			- Currently the boids can "see" all around them. What happens if they can only see
				forward?
			- What would happen if you gave the boids different velocities? For example, you could
				make boids that are not near other boids fly faster to catch up to the flock. Or
				you could simulate the diminished air resistance that boids experience when flying
				together by making them fly faster when in a group.
			- Are there other interesting ways you can make the boids different from each other?
				There could be random variation in the population, or you could have distinct
				"species" of boids.
			- Can you find a way to form V-shaped flocks, like migrating geese?
			- Can you get the boids to fly around obstacles in the middle of the world?
			""",
		"",
		x -> true
	),
]